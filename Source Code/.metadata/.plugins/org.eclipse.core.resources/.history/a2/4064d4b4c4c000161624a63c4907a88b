package com.reyzerbit.guis;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import com.reyzerbit.Feats;

public class GUIContent extends JFrame{
	
	private static final long serialVersionUID = 1L;
	
	//Labels
	static JLabel inputLabel = new JLabel("");
	static JLabel healthPoints = new JLabel("  HP: " + Feats.health);
	
	//Panels
	static JPanel stats = new JPanel();
	
	//Hover TextArea
	static JTextArea hover = new JTextArea("Hover over a stat for details.");
	
	//Text IO
	public static JTextArea outputWindow = new JTextArea();
	public static JTextField inputWindow = new JTextField();
	static JScrollPane scroll = new JScrollPane(outputWindow);
	
	//Images
	
	//Enter Button
	static JButton enter = new JButton("Enter");
		
		//Initiate Game GUI

		//Background WIP
		
		File backgroundPath = new File(getClass().getResource("com/reyzerbit/assets/background.jpg").toURI());
		final BufferedImage background = ImageIO.read(backgroundPath);
		
		@SuppressWarnings("serial")
		JPanel pane = new JPanel() {
	        @Override
	        protected void paintComponent(Graphics g) {
	            super.paintComponent(g);
	            g.drawImage(background, 0, 0, null);
	        }
	    };
		
		//GUI Constraints
	    this.setContentPane(pane);
	    this.getContentPane().setLayout(null);
	    this.setVisible(true);
	    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    this.setSize(800, 500);
	    this.setName("Steven Universe Text Based RPG");
	    this.setTitle("Steven Universe Text Based RPG");
		this.setResizable(false);
		this.setLocationRelativeTo(null);
		this.getRootPane().setDefaultButton(enter);

		//Hover Window Constraints
		hover.setWrapStyleWord(true);
		hover.setLineWrap(true);
		hover.setEditable(false);
		
		//Input Window Constraints
		inputWindow.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1, true));
		
		//Output Windows Constraints
		outputWindow.setWrapStyleWord(true);
		outputWindow.setLineWrap(true);
		outputWindow.setEditable(false);
		outputWindow.setMargin(new Insets(5,5,5,5));
		
		//Scroll Constraints
		scroll.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3, true));
		
		//Enter Button Constraints
		enter.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2, true));
		enter.setOpaque(true);
		enter.setBackground(Color.LIGHT_GRAY);
		
		//JPanel Constraints
		stats.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3, true));
		stats.setLayout(null);
		stats.setBackground(Color.WHITE);
		
		//Hover Constraints
		hover.setMargin(new Insets(5,5,5,5));
		hover.setBorder(BorderFactory.createLineBorder(Color.BLACK, 3, true));
		
		//Stats JPanel Item Constraints
		healthPoints.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));
		healthPoints.setOpaque(true);
		healthPoints.setBackground(new Color(255, 74, 90));
		
		//Place JPanel Components
		addComponentFrame(stats, healthPoints, 20, 20, 65, 30);
		
		//Place Components
		addComponent(this, scroll, 20, 20, 280, 440);
		addComponent(this, inputWindow, 390, 35, 200, 20);
		addComponent(this, enter, 610, 35, 100, 20);
		addComponent(this, stats, 340, 80, 440, 250);
		addComponent(this, hover, 340, 380, 320, 80);
		
		
		//Request Focus for Input Window
		inputWindow.requestFocusInWindow();
		
		//Listener for Hovers
		healthPoints.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent event) {
                hover.setText("Your health starts at ten, and will slowly raise as you level up.");
            }

            @Override
            public void mouseExited(MouseEvent event) {
                hover.setText("Hover over a stat for details.");
            }
        });
		
		//Add Listener for Button
		enter.addActionListener(new ActionListener() {

			@Override
			
			public void actionPerformed(ActionEvent e) {
				
				Feats.runNextPath(Feats.location);
				
			}
			
		});

	private static void addComponent(JFrame frame, Component component, int posx, int posy, int width, int height){
		
		component.setBounds(posx, posy, width, height);
		frame.getContentPane().add(component);
	
	}
	
	private static void addComponentFrame(JPanel panel, Component component, int posx, int posy, int width, int height){
		
		component.setSize(width, height);
		component.setLocation(posx, posy);
		panel.add(component);
	
	}
	
}
	

